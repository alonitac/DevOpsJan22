doron.dollev@gmail.com

### Processes handling

**(Q1)** A user started a process and logged out from the terminal. Which command he used if the process still running in the background:

* nohup


**(Q2)** The `kill` command always terminates a process.

* False


**(Q3)** Which command could be used to know how many processes are running in the background terminal session?

* jobs


**(Q4)** Given a terminal session with long process running in it, how will you ask this process to terminate?

* CTRL+c


**(Q5)** Given a terminal session with long process running in it, how will you ask this process the stop?

* CTRL+z


**(Q6)** How would you run the `sleep 10` command as a foreground process?

* sleep 10 &


**(Q7)** Which of the following command would deliver a SIGTERM to the `xscreensaver` process?

* None of the above


**(Q8)** Which of the following would deliver a SIGKILL to the `xscreensaver` command?

* kill -9 4846


**(Q9)** Which of the following would send a SIGCHLD (signal number 17) to the `ssh-agent` process?

* kill -CHLD 4828


**(Q10)** Which key pressed within the `top` command allows the user to send a signal to a process?

* k


**(Q11 - easy 5 points bonus)** Open a new terminal session and type the command `python`. Then send a SIGINT signal using your keyboard. What best describes
 how the python process responds to the SIGINT signal?

* The program has implemented a custom signal handler for the SIGINT signal.

Process state
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
doron      26853  0.1  0.0   7024  3300 pts/0    D    12:34   0:02 /bin/bash ./write_to_file_sequentially.sh
doron      26854  0.1  0.0   7024  3208 pts/0    D    12:34   0:02 /bin/bash ./write_to_file_sequentially.sh
doron      26855  0.1  0.0   7024  3400 pts/0    R    12:34   0:02 /bin/bash ./write_to_file_sequentially.sh
doron      26856  0.1  0.0   7024  3156 pts/0    D    12:34   0:02 /bin/bash ./write_to_file_sequentially.sh
doron      26857  0.1  0.0   7024  3380 pts/0    D    12:34   0:02 /bin/bash ./write_to_file_sequentially.sh

USER - doron (me)
PID - process ID
%CPU - current CPU usage
%MEM - current memory usage (physical memory)
VSZ - virtual memory size (in kilobytes)
RSS - resident set size, the non-swapped physical memory that a task has used (in kilobytes)
STAT - D uninterruptible sleep
STAT - R running or runnable
START - time the command started
TIME - accumulated CPU time (user + system)
COMMAND - command name with all its arguments as a string

